myData.mean <- aggregate(VPEMBIAS$RT,by = list(VPEMBIAS$ps, VPEMBIAS$Expression,VPEMBIAS$Inversion,VPEMBIAS$Pres),FUN = 'mean')
colnames(myData.mean) <- c("ps","Expression","Inversion","Pres")
head(VPEMBIAS)
myData.mean <- aggregate(VPEMBIAS$RT,by = list(VPEMBIAS$ps, VPEMBIAS$Expression,VPEMBIAS$Inversion,VPEMBIAS$pres),FUN = 'mean')
colnames(myData.mean) <- c("ps","Expression","Inversion","Pres")
stress.aov <- with(myData.mean,aov(RT ~ Expression * Inversion * Pres +Error(PID / (Expression * Inversion * Pres)))
)
colnames(myData.mean) <- c("ps","Expression","Inversion","Pres","RT")
stress.aov <- with(myData.mean,aov(RT ~ Expression * Inversion * Pres +Error(PID / (Expression * Inversion * Pres)))
)
colnames(myData.mean) <- c("ps","Expression","Inversion","Pres","RT")
stress.aov <- with(myData.mean,aov(RT ~ Expression * Inversion * Pres +Error(ps / (Expression * Inversion * Pres))))
stress.aov
summary(stress.aov)
library(ggplot2)
const.rep_subs=77 #Reported subjects
const.rep_sample_rate=(1/500)*1000 #Reported sample rate
setwd("/Users/nickhedger/Documents/NH_EYETRACK_NOODLE")
DATA   <- read.csv("FV_data_raw.csv")
head(DATA)
# The last time subjects make a saccade is ~5000, so will assume that this is in ms.
max(DATA$CURRENT_SAC_START_TIME)
#Confirm sample rate
sum(DATA$CURRENT_SAC_START_TIME%%const.rep_sample_rate==0)
#Sampling rate is once every 2 milliseconds.
DATA$SUB=factor(as.numeric(DATA$RECORDING_SESSION_LABEL))
DATA$TRIAL=factor(as.numeric(DATA$trial_1))
head(DATA)
levels(DATA$TRIAL)
head(DATA[DATA$SUB==1 & DATA$TRIAL ==1,])
clear all
load('Workspace3.RData')
library(eyetrackingR)
data <- make_eyetrackingr_data(EXPDATA_FRAME_BIG,
participant_column = "ps",
trial_column = "trial",
time_column = "samp",
aoi_columns = c('isinL','isinR',"SOCIAL","NONSOCIAL"),
treat_non_aoi_looks_as_missing = TRUE,trackloss_column="track")
head(data)
length(levels(data$trial))
library(lme4)
library(afex)
data$scramb=factor(data$scramb)
data$X3=factor(data$X3,levels=c(1,2),labels=c("LeftSoc","Rightsoc"))
response_window_agg_by_sub <- make_time_window_data(data, aois=c("SOCIAL","NONSOCIAL"),summarize_by = "ps",predictor_columns = c("scramb"))
model_window <- lmer(Prop ~ AOI*scramb + (1 | ps), data = response_window_agg_by_sub, REML = FALSE)
testInteractions(model_window, fixed=c("scramb"), pairwise=c("AOI"),adjustment="holm")
library(effects)
library(phia)
testInteractions(model_window, fixed=c("scramb"), pairwise=c("AOI"),adjustment="holm")
x=testInteractions(model_window, fixed=c("scramb"), pairwise=c("AOI"),adjustment="holm")
x
x$`Pr(>Chisq)`
x$`Pr(>Chisq)`[1]
pval=rep(0,length(levels(data$ps)))
pval
length(levels(data$trial))
data3=data[data$trial!=1]
data3=data[data$trial!=1,]
pval=rep(0,length(levels(data$trial)))
for (s in 1:length(levels(data$trial))) {
print(s)
data2=data[data$trial!=s,]
data$scramb=factor(data$scramb)
data$X3=factor(data$X3,levels=c(1,2),labels=c("LeftSoc","Rightsoc"))
response_window_agg_by_sub <- make_time_window_data(data, aois=c("SOCIAL","NONSOCIAL"),summarize_by = "ps",predictor_columns = c("scramb"))
model_window <- lmer(Prop ~ AOI*scramb + (1 | ps), data = response_window_agg_by_sub, REML = FALSE)
x=testInteractions(model_window, fixed=c("scramb"), pairwise=c("AOI"),adjustment="holm")
pval[s]=x$`Pr(>Chisq)`[1]
}
qplot(pval)
qplot(1:80,pval)
pval
sum(unique(pval))
unique(pval)
pval=rep(0,length(levels(data$trial)))
for (s in 1:length(levels(data$trial))) {
print(s)
data2=data[data$trial!=s,]
data2$scramb=factor(data$scramb)
data2$X3=factor(data$X3,levels=c(1,2),labels=c("LeftSoc","Rightsoc"))
response_window_agg_by_sub <- make_time_window_data(data2, aois=c("SOCIAL","NONSOCIAL"),summarize_by = "ps",predictor_columns = c("scramb"))
model_window <- lmer(Prop ~ AOI*scramb + (1 | ps), data = response_window_agg_by_sub, REML = FALSE)
x=testInteractions(model_window, fixed=c("scramb"), pairwise=c("AOI"),adjustment="holm")
pval[s]=x$`Pr(>Chisq)`[1]
}
qplot(1:80,pval)
pval=rep(0,length(levels(data$trial)))
for (s in 1:length(levels(data$trial))) {
print(s)
data2=data[data$trial!=s,]
data2$scramb=factor(data2$scramb)
data2$X3=factor(data2$X3,levels=c(1,2),labels=c("LeftSoc","Rightsoc"))
response_window_agg_by_sub <- make_time_window_data(data2, aois=c("SOCIAL","NONSOCIAL"),summarize_by = "ps",predictor_columns = c("scramb"))
model_window <- lmer(Prop ~ AOI*scramb + (1 | ps), data = response_window_agg_by_sub, REML = FALSE)
x=testInteractions(model_window, fixed=c("scramb"), pairwise=c("AOI"),adjustment="holm")
pval[s]=x$`Pr(>Chisq)`[1]
}
qplot(1:80,pval)
max(pval)
min(pval)
which.min(pval)
which.max(pval)
maxN <- function(x, N=2){
len <- length(x)
if(N>len){
warning('N greater than length(x).  Setting N=length(x)')
N <- length(x)
}
sort(x,partial=len-N+1)[len-N+1]
}
maxN(pval)
maxN(pval,3)
maxN(pval,1:30)
gh=data.frame(cbind(index,pval))
index=c(1:80)
gh=data.frame(cbind(index,pval))
gh
league <- gh[order(pval),]
league
league <- gh[order(-pval),]
league
install.packages("MPDiR")
install.packages("ggplot2")
install.packages("stringr")
install.packages("pracma")
install.packages("ggplot2")
install.packages("stringr")
library(pracma)
library(MPDiR)
library(ggplot2)
library(stringr)
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
require(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
# 2) Load Modelfest data --------------------------------------------------
data(ModelFest.df)
# 3) Define stimuli used to derive the CSF.
# These can be viewed at http://vision.arc.nasa.gov/modelfest/stimuli.html ---------------------------------
ModelFest.df$Stim2=str_sub(ModelFest.df$Stim,start=5, end=6)
ModelFest.df$Stim2=as.numeric(ModelFest.df$Stim2)
Modelfest=ModelFest.df[ModelFest.df$Stim2<10,]
Modelfest$cpd[Modelfest$Stim2==1]=1.12
Modelfest$cpd[Modelfest$Stim2==2]=2
Modelfest$cpd[Modelfest$Stim2==3]=2.83
Modelfest$cpd[Modelfest$Stim2==4]=4
Modelfest$cpd[Modelfest$Stim2==5]=5.66
Modelfest$cpd[Modelfest$Stim2==6]=8
Modelfest$cpd[Modelfest$Stim2==7]=11.3
Modelfest$cpd[Modelfest$Stim2==8]=16
Modelfest$cpd[Modelfest$Stim2==9]=22.6
Modelfest$cpd[Modelfest$Stim2==10]=30
Modelfest$consens=10^(Modelfest$LContSens)
y=ggplot(Modelfest,aes(x=cpd,y=consens))+geom_point(aes(group=Obs,colour=Obs),size=3)+geom_smooth(aes(group=Obs,colour=Obs),size=1,se=FALSE)+geom_smooth(size=3,colour="black",se=TRUE)+ scale_x_log10(limits=c(1,30))+ scale_y_log10()+ annotation_logticks()+
ggtitle("Modelfest dataset (all observers)")+ theme(legend.position="top")+ylab("Sensitivity")+xlab("cpd")
y
# 6) Get mean consens across observers ------------------------------------
v=tapply(Modelfest$consens,Modelfest$cpd,mean)
# Normalise to peak.
peaknormv=v/max(v)
peaknormv=as.numeric(peaknormv)
# 7) Convert to decibels --------------------------------------------------
dB=20*log10(peaknormv)
CPDS=20*log10(unique(Modelfest$cpd))
# 8) Fit polynomial to csf data -------------------------------------------
#nth order polynomial
order=2;
# fit polynomial
p=polyfit(CPDS,dB,order)
p
SFS=-6:35
pred=polyval(p, SFS)
# 9) Plot the mean CSF ----------------------------------------------------
initialCSF=qplot(10^(CPDS/20),10^(dB/20))+geom_line()+scale_x_continuous(limits=c(0,30),breaks=seq(0,30,1))+scale_y_continuous()+ scale_x_log10(limits=c(1,30))+ scale_y_log10(limits=c(0.01,1))+ annotation_logticks()+
ggtitle("Mean Modelfest CSF (normalised to peak)")+ylab("Sensitivity")+xlab("cpd")
initialCSF
# 10) Summarise the model fit ---------------------------------------------
MOD=summary(lm(dB ~ CPDS + I(CPDS^2)))
# 11) Plot ----------------------------------------------------------------
# Plot the fitted CSF.
pred=10^(pred/20)
polynomialfit=qplot(10^(SFS/20),pred)+geom_line()+scale_x_continuous(limits=c(0,30),breaks=seq(0,30,1))+scale_y_continuous()+ scale_x_log10(limits=c(1,30))+ scale_y_log10(limits=c(0.01,1))+ annotation_logticks()+
ggtitle("Polynomial fit to Modelfest data")+ylab("Sensitivity")+xlab("cpd")
polynomialfit
# Plot both.
multiplot(y,initialCSF,polynomialfit,cols=3)
cat("The model accounts for", MOD$r.squared*100,"% of variance in the mean csf",'\n')
league
league$index
library(ggplot2)
const.rep_subs=77 #Reported subjects
const.rep_sample_rate=(1/500)*1000 #Reported sample rate
setwd("/Users/nickhedger/Documents/NH_EYETRACK_NOODLE")
DATA   <- read.csv("FV_data_raw.csv")
head(DATA)
# The last time subjects make a saccade is ~5000, so will assume that this is in ms.
max(DATA$CURRENT_SAC_START_TIME)
#Confirm sample rate
sum(DATA$CURRENT_SAC_START_TIME%%const.rep_sample_rate==0)
#Sampling rate is once every 2 milliseconds.
DATA$SUB=factor(as.numeric(DATA$RECORDING_SESSION_LABEL))
DATA$TRIAL=factor(as.numeric(DATA$trial_1))
load('Workspace3.RData')
library(eyetrackingR)
data <- make_eyetrackingr_data(EXPDATA_FRAME_BIG,
participant_column = "ps",
trial_column = "trial",
time_column = "samp",
aoi_columns = c('isinL','isinR',"SOCIAL","NONSOCIAL"),
treat_non_aoi_looks_as_missing = TRUE,trackloss_column="track")
library(lme4)
library(afex)
library(effects)
library(phia)
pval=rep(0,length(levels(data$trial)))
for (s in 1:length(levels(data$trial))) {
print(s)
data2=data[data$trial!=s,]
data2$scramb=factor(data2$scramb)
data2$X3=factor(data2$X3,levels=c(1,2),labels=c("LeftSoc","Rightsoc"))
response_window_agg_by_sub <- make_time_window_data(data2, aois=c("SOCIAL","NONSOCIAL"),summarize_by = "ps",predictor_columns = c("scramb"))
model_window <- lmer(Prop ~ AOI*scramb + (1 | ps), data = response_window_agg_by_sub, REML = FALSE)
x=testInteractions(model_window, fixed=c("scramb"), pairwise=c("AOI"),adjustment="holm")
pval[s]=x$`Pr(>Chisq)`[1]
}
qplot(1:80,pval)
index=c(1:80)
gh=data.frame(cbind(index,pval))
league <- gh[order(-pval),]
league
league$index
head(DATA)
DATA[DATA$trial_1==league$index[1],][1]
DATA[DATA$trial_1==league$index[1],]
DATA[DATA$trial_1==league$index[1],][,1]
DATA[DATA$trial_1==league$index[1],][1,]
DATA[DATA$trial_1==league$index[1],][1,]$image1
for (i in 1:length(league$index)) {
stim[i]=DATA[DATA$trial_1==league$index[i],][1]$image1
}
stim=rep(0,length(league$index))
stim
for (i in 1:length(league$index)) {
stim[i]=DATA[DATA$trial_1==league$index[i],][1]$image1
}
stim
DATA[DATA$trial_1==league$index[1],][1]$image1
DATA[DATA$trial_1==league$index[1],][1]
DATA[DATA$trial_1==league$index[1],][,1]
DATA[DATA$trial_1==league$index[1],][1,]
stim=rep(0,length(league$index))
for (i in 1:length(league$index)) {
stim[i]=DATA[DATA$trial_1==league$index[i],][,1]$image1
}
DATA[DATA$trial_1==league$index[1],][,1]$image1
DATA[DATA$trial_1==league$index[1],][,1]
DATA[DATA$trial_1==league$index[1],][1,]
stim=rep(0,length(league$index))
for (i in 1:length(league$index)) {
stim[i]=DATA[DATA$trial_1==league$index[i],][1,]$image1
}
stim
stim=()
stim=data.frame()
for (i in 1:length(league$index)) {
stim[i]=DATA[DATA$trial_1==league$index[i],][1,]$image1
}
stim=data.frame()
for (i in 1:length(league$index)) {
stim$label[i]=DATA[DATA$trial_1==league$index[i],][1,]$image1
}
stim=data.frame(nrow=league$index)
for (i in 1:length(league$index)) {
stim$label[i]=DATA[DATA$trial_1==league$index[i],][1,]$image1
}
stim$label
stim=list()
for (i in 1:length(league$index)) {
stim[i]=DATA[DATA$trial_1==league$index[i],][1,]$image1
}
stim
stim[i]=DATA[DATA$trial_1==league$index[i],][1,]$image1
stim
stim=DATA[DATA$trial_1==league$index[1],][1,]$image1
stim
stim=as.string(DATA[DATA$trial_1==league$index[1],][1,]$image1)
stim=as.character(DATA[DATA$trial_1==league$index[1],][1,]$image1)
stim
stim=list()
for (i in 1:length(league$index)) {
stim[i]=as.character(DATA[DATA$trial_1==league$index[i],][1,]$image1)
}
stim
stim[1]
stim[1][1]
stim[[1]][1]
stim[[1]][1][1]
stim[[1]][1]
n=data.frame(stim)
n
stim=rep(0,length(league$index))
for (i in 1:length(league$index)){
stim[i]=as.character(DATA[DATA$trial_1==league$index[i],][1,]$image1)
}
stim
n=data.frame(stim)
n
n2=n[!grepl("scrambled", n$stim),]
n2
n2=data.frame(n[!grepl("scrambled", n$stim),])
n2
View(n2)
View(n2)
n2=data.frame(n[!grepl("scrambled", n$stim),],row.names = FALSE)
n3=n2$n..grepl..scrambled...n.stim....
n3
View(n2)
setwd("/Users/nickhedger/Documents/Github/EYETRACK_2018/Data")
DATA   <- read.csv(file=file.choose())
View(DATA)
View(DATA)
colnames(DATA)=c("Trial","Timestamp","X","Y","side","sc","model")
ggplot(DATA,aes(x=X,y=Y))+geom_point()+facet_wrap(~Trial,ncol=10)
ggplot(DATA,aes(x=X,y=Y))+geom_path()+facet_wrap(~Trial,ncol=10)
ggplot(DATA,aes(x=X,y=Y))+geom_path()+facet_wrap(~Trial,ncol=10)+geom_tile(aes(fill = factor(side)))
ggplot(DATA,aes(x=X,y=Y))+geom_path()+facet_wrap(~Trial,ncol=10,aes(strip.position=side))
ggplot(DATA,aes(x=X,y=Y))+geom_path(aes(colour=sc))+facet_wrap(~Trial,ncol=10)
DATA$side=factor(DATA$side,levels=c(1,2),labels=c("Social Left","Social Right"))
colnames(DATA)=c("Trial","Timestamp","X","Y","side","sc","model")]
library(ggplot2)
DATA$side=factor(DATA$side,levels=c(1,2),labels=c("Social Left","Social Right"))
DATA$sc=factor(DATA$sc,levels=c(1,2),labels=c("Intact","Scrambled"))
ggplot(DATA,aes(x=X(1920),y=Y*1080))+geom_path(aes(colour=sc))+facet_wrap(~Trial,ncol=10)
colnames(DATA)=c("Trial","Timestamp","X","Y","side","sc","model")]
library(ggplot2)
DATA$side=factor(DATA$side,levels=c(1,2),labels=c("Social Left","Social Right"))
DATA$sc=factor(DATA$sc,levels=c(1,2),labels=c("Intact","Scrambled"))
ggplot(DATA,aes(x=X*1920,y=Y*1080))+geom_path(aes(colour=sc))+facet_wrap(~Trial,ncol=10)
DATA$X*1920
ggplot(DATA,aes(x=X*1920,y=Y*1080))+geom_path(aes(colour=sc))
ggplot(DATA,aes(x=X,y=Y))+geom_path(aes(colour=sc))+facet_wrap(~Trial,ncol=10)
setwd("/Users/nickhedger/Documents/Github/EYETRACK_2018/Data")
DATA   <- read.csv(file=file.choose())
colnames(DATA)=c("Trial","Timestamp","X","Y","side","sc","model")]
library(ggplot2)
DATA$side=factor(DATA$side,levels=c(1,2),labels=c("Social Left","Social Right"))
DATA$sc=factor(DATA$sc,levels=c(1,2),labels=c("Intact","Scrambled"))
ggplot(DATA,aes(x=X,y=Y))+geom_path(aes(colour=sc))+facet_wrap(~Trial,ncol=10)
head(DATA)
DATA   <- read.csv(file=file.choose())
colnames(DATA)=c("Trial","Timestamp","X","Y","side","sc","model")]
DATA   <- read.csv(file=file.choose())
colnames(DATA)=c("Trial","Timestamp","X","Y","side","sc","model")
head(DATA)
library(ggplot2)
DATA$side=factor(DATA$side,levels=c(1,2),labels=c("Social Left","Social Right"))
DATA$sc=factor(DATA$sc,levels=c(1,2),labels=c("Intact","Scrambled"))
ggplot(DATA,aes(x=X,y=Y))+geom_path(aes(colour=sc))+facet_wrap(~Trial,ncol=10)
ggplot(DATA,aes(x=X*1920,y=Y*1080))+geom_path(aes(colour=sc))+facet_wrap(~Trial,ncol=10)
ggplot(DATA,aes(x=X*1920,y=Y*1080))+geom_path(aes(colour=sc))+facet_wrap(~Trial,ncol=10)+xlim(c(0,1920))+ylim(c(0,1080))
ggplot(DATA,aes(x=X*1920,y=Y*1080))+geom_path(aes(colour=sc))+facet_wrap(~Trial,ncol=10)+xlim(c(0,1920))+ylim(c(0,1080))+
geom_rect(xmin =439 ,xmax=808,ymin=404,ymax=677)
ggplot(DATA,aes(x=X*1920,y=Y*1080))+geom_rect(xmin =439 ,xmax=808,ymin=404,ymax=677)+geom_rect(xmin =1113 ,xmax=1482,ymin=404,ymax=677)+geom_path(aes(colour=sc))+
facet_wrap(~Trial,ncol=10)+xlim(c(0,1920))+ylim(c(0,1080))
ggplot(DATA,aes(x=X*1920,y=Y*1080))+geom_rect(xmin =439 ,xmax=808,ymin=404,ymax=677)+geom_rect(xmin =1113 ,xmax=1482,ymin=404,ymax=677)+geom_path(aes(colour=sc))+
facet_wrap(~Trial,ncol=10)+xlim(c(200,1620))+ylim(c(200,8080))
ggplot(DATA,aes(x=X*1920,y=Y*1080))+geom_rect(xmin =439 ,xmax=808,ymin=404,ymax=677)+geom_rect(xmin =1113 ,xmax=1482,ymin=404,ymax=677)+geom_path(aes(colour=sc))+
facet_wrap(~Trial,ncol=10)+xlim(c(200,1620))+ylim(c(200,880))
file
DATAint=DATA[DATA$sc=="Intact",]
ggplot(DATAint,aes(x=X*1920,y=Y*1080))+geom_rect(xmin =439 ,xmax=808,ymin=404,ymax=677)+geom_rect(xmin =1113 ,xmax=1482,ymin=404,ymax=677)+geom_path(aes(colour=side))+
facet_wrap(~Trial,ncol=10)+xlim(c(200,1620))+ylim(c(200,880))
file=file.choose()
filename
file
library(stringr)
str_extract(file, "\\d")
str_extract(file, "_summary")
str_extract(file, "/const/")
str_extract(file, "/const/+")
str_extract_all("The Cat in the Hat", "[a-z]+")
str_extract_all("The Cat in the Hat", regex("[a-z]+", TRUE))
res <- str_match(file, "const/(.*?) _summary.txt")
res
res <- str_match(file, "const/(.*? _summary.txt")
file
res <- str_match(file, "const/(.*? _summary.txt")
res <- str_match(file, "const/(.*?) _summary.txt")
res
res <- str_match(file, "const/ (.*?) _summary.txt")
res
pattern="const/ (.*?) _summary"
file
result <- regmatches(file,regexec(pattern,file))
result
pattern="const/ (.*?) _summary.txt"
result <- regmatches(file,regexec(pattern,file))
basename(file)
basename(file(1:end-3))
basename(file(1:end))
basename(file)
file
basename(file)(1:end)
basename(file)[1:end]
basename(file)
s=basename(file)
s
s[1]
s[1][1]
s[1][1][1]
filename=file.choose()
filestring=as.charachter(basename(filename))
filestring=as.character(basename(filename))
filestring
filestring[1]
length(filestring)
nchar(filestring)
subname=substr(filestring, 1, nchar(filestring)-4)
subname
strcat(subname,"intact")
INTPLOT=ggplot(DATAint,aes(x=X*1920,y=Y*1080))+geom_rect(xmin =439 ,xmax=808,ymin=404,ymax=677)+geom_rect(xmin =1113 ,xmax=1482,ymin=404,ymax=677)+geom_path(aes(colour=side))+
facet_wrap(~Trial,ncol=10)+xlim(c(200,1620))+ylim(c(200,880))+ggtitle("Scrambled stimuli")
ggsave(filename=strcat(subname,"_intact.pdf"),plot=INTPLOT,width=27,height=15,units="cm",device='pdf')
setwd("/Users/nickhedger/Documents/Github/EYETRACK_2018/Data")
filename=file.choose()
DATA   <- read.csv(file=filename)
colnames(DATA)=c("Trial","Timestamp","X","Y","side","sc","model")
filestring=as.charachter(basename(filename))
subname=substr(filestring, 1, nchar(filestring)-4)
library(ggplot2)
library(pracma)
library(stringr)
DATA$side=factor(DATA$side,levels=c(1,2),labels=c("Social Left","Social Right"))
DATA$sc=factor(DATA$sc,levels=c(1,2),labels=c("Intact","Scrambled"))
DATAint=DATA[DATA$sc=="Intact",]
INTPLOT=ggplot(DATAint,aes(x=X*1920,y=Y*1080))+geom_rect(xmin =439 ,xmax=808,ymin=404,ymax=677)+geom_rect(xmin =1113 ,xmax=1482,ymin=404,ymax=677)+geom_path(aes(colour=side))+
facet_wrap(~Trial,ncol=10)+xlim(c(200,1620))+ylim(c(200,880))+ggtitle("Scrambled stimuli")
ggsave(filename=strcat(subname,"_intact.pdf"),plot=INTPLOT,width=27,height=15,units="cm",device='pdf')
DATAint=DATA[DATA$sc=="Scrambled",]
SCPLOT=ggplot(DATAint,aes(x=X*1920,y=Y*1080))+geom_rect(xmin =439 ,xmax=808,ymin=404,ymax=677)+geom_rect(xmin =1113 ,xmax=1482,ymin=404,ymax=677)+geom_path(aes(colour=side))+
facet_wrap(~Trial,ncol=10)+xlim(c(200,1620))+ylim(c(200,880))+ggtitle("Scrambled stimuli")
ggsave(strcat(subname,"_scrambled.pdf"),plot=SCPLOT,width=27,height=15,units="cm",device='pdf')
setwd("/Users/nickhedger/Documents/Github/EYETRACK_2018/Data")
filename=file.choose()
DATA   <- read.csv(file=filename)
colnames(DATA)=c("Trial","Timestamp","X","Y","side","sc","model")
filestring=as.charachter(basename(filename))
subname=substr(filestring, 1, nchar(filestring)-4)
library(ggplot2)
library(pracma)
library(stringr)
DATA$side=factor(DATA$side,levels=c(1,2),labels=c("Social Left","Social Right"))
DATA$sc=factor(DATA$sc,levels=c(1,2),labels=c("Intact","Scrambled"))
DATAint=DATA[DATA$sc=="Intact",]
INTPLOT=ggplot(DATAint,aes(x=X*1920,y=Y*1080))+geom_rect(xmin =439 ,xmax=808,ymin=404,ymax=677)+geom_rect(xmin =1113 ,xmax=1482,ymin=404,ymax=677)+geom_path(aes(colour=side))+
facet_wrap(~Trial,ncol=10)+xlim(c(200,1620))+ylim(c(200,880))+ggtitle("Scrambled stimuli")
ggsave(filename=strcat(subname,"_intact.pdf"),plot=INTPLOT,width=27,height=15,units="cm",device='pdf')
DATAint=DATA[DATA$sc=="Scrambled",]
SCPLOT=ggplot(DATAint,aes(x=X*1920,y=Y*1080))+geom_rect(xmin =439 ,xmax=808,ymin=404,ymax=677)+geom_rect(xmin =1113 ,xmax=1482,ymin=404,ymax=677)+geom_path(aes(colour=side))+
facet_wrap(~Trial,ncol=10)+xlim(c(200,1620))+ylim(c(200,880))+ggtitle("Scrambled stimuli")
ggsave(strcat(subname,"_scrambled.pdf"),plot=SCPLOT,width=27,height=15,units="cm",device='pdf')
filename=file.choose()
DATA   <- read.csv(file=filename)
colnames(DATA)=c("Trial","Timestamp","X","Y","side","sc","model")
filestring=as.charachter(basename(filename))
subname=substr(filestring, 1, nchar(filestring)-4)
setwd("/Users/nickhedger/Documents/Github/EYETRACK_2018/Data")
filename=file.choose()
DATA   <- read.csv(file=filename)
colnames(DATA)=c("Trial","Timestamp","X","Y","side","sc","model")
filestring=as.character(basename(filename))
subname=substr(filestring, 1, nchar(filestring)-4)
library(ggplot2)
library(pracma)
library(stringr)
DATA$side=factor(DATA$side,levels=c(1,2),labels=c("Social Left","Social Right"))
DATA$sc=factor(DATA$sc,levels=c(1,2),labels=c("Intact","Scrambled"))
DATAint=DATA[DATA$sc=="Intact",]
INTPLOT=ggplot(DATAint,aes(x=X*1920,y=Y*1080))+geom_rect(xmin =439 ,xmax=808,ymin=404,ymax=677)+geom_rect(xmin =1113 ,xmax=1482,ymin=404,ymax=677)+geom_path(aes(colour=side))+
facet_wrap(~Trial,ncol=10)+xlim(c(200,1620))+ylim(c(200,880))+ggtitle("Scrambled stimuli")
ggsave(filename=strcat(subname,"_intact.pdf"),plot=INTPLOT,width=27,height=15,units="cm",device='pdf')
DATAint=DATA[DATA$sc=="Scrambled",]
SCPLOT=ggplot(DATAint,aes(x=X*1920,y=Y*1080))+geom_rect(xmin =439 ,xmax=808,ymin=404,ymax=677)+geom_rect(xmin =1113 ,xmax=1482,ymin=404,ymax=677)+geom_path(aes(colour=side))+
facet_wrap(~Trial,ncol=10)+xlim(c(200,1620))+ylim(c(200,880))+ggtitle("Scrambled stimuli")
ggsave(strcat(subname,"_scrambled.pdf"),plot=SCPLOT,width=27,height=15,units="cm",device='pdf')
clear all
